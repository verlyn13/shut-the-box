---
title: "Shut-the-Box: AI Strategy Performance Analysis"
format: html
execute:
  echo: false
  warning: false
params:
  n_games: 
    label: "Number of Games per Strategy:"
    value: 1000
    input: numeric
  strategies:
    label: "AI Strategies to Compare:"
    value: ["greedy_max", "min_tiles"]
    input: select
    choices: ["greedy_max", "min_tiles"]
  random_seed:
    label: "Random Seed for Simulations:"
    value: 42
    input: numeric
---

# Introduction

This report analyzes the performance of different AI strategies in the game "Shut the Box". 

**Current Analysis Parameters:**
- Strategies analyzed: greedy_max, min_tiles
- Games per strategy: 1000
- Random seed: 42

Each strategy plays against itself for the specified number of games, allowing us to compare their relative effectiveness.

# Simulation Execution

```{python}
import sys
import os

# Add the stbsim source to Python path
project_root = '/home/verlyn13/Projects/shut-the-box/shut_the_box_sim'
sys.path.insert(0, os.path.join(project_root, 'src'))

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from stbsim.simulation import Simulation
from stbsim.strategies import STRATEGY_MAP
import random

# Set styling for plots
plt.style.use('default')
sns.set_palette("husl")

# Use default parameters for this version
n_games = 1000
strategies = ["greedy_max", "min_tiles"]
random_seed = 42

# Initialize simulation
sim = Simulation()

# Collect results for all strategies
all_results = []
strategy_summaries = []

print(f"Running simulations with {n_games} games per strategy...")

for strategy_name in strategies:
    print(f"  Running {strategy_name} strategy...")
    
    # Run simulation with this strategy for both players
    results = sim.run(n_games=n_games, 
                     p1_strategy=strategy_name, 
                     p2_strategy=strategy_name, 
                     seed_start=random_seed)
    
    # Add strategy info to each result
    for result in results:
        result['strategy'] = strategy_name
        all_results.append(result)
    
    # Calculate summary statistics
    df_strategy = pd.DataFrame(results)
    
    # Win rates (since both players use same strategy, should be ~50/50)
    p1_wins = (df_strategy['winner'] == 'P1').sum()
    p2_wins = (df_strategy['winner'] == 'P2').sum()
    
    # Average scores
    avg_p1_score = df_strategy['p1_score'].mean()
    avg_p2_score = df_strategy['p2_score'].mean()
    avg_score = (avg_p1_score + avg_p2_score) / 2
    
    # Shut box frequency
    shut_box_freq = df_strategy['shut_box'].mean() * 100
    
    strategy_summaries.append({
        'Strategy': strategy_name,
        'Average Score': f"{avg_score:.2f}",
        'P1 Win Rate (%)': f"{(p1_wins/n_games)*100:.1f}",
        'P2 Win Rate (%)': f"{(p2_wins/n_games)*100:.1f}", 
        'Shut-the-Box Frequency (%)': f"{shut_box_freq:.1f}"
    })

# Create DataFrames
df_all = pd.DataFrame(all_results)
df_summary = pd.DataFrame(strategy_summaries)

print("Simulation completed!")
```

# Performance Metrics & Analysis

## Overall Performance Summary

```{python}
from IPython.display import display, Markdown

# Display summary table
display(Markdown("### Strategy Performance Summary"))
display(df_summary)
```

## Score Distribution Comparison

```{python}
# Create figure with subplots
fig, axes = plt.subplots(2, 2, figsize=(15, 10))
fig.suptitle('Strategy Performance Analysis', fontsize=16)

# 1. Average Score Comparison
ax1 = axes[0, 0]
strategy_avg_scores = []
strategy_names = []

for strategy in strategies:
    strategy_data = df_all[df_all['strategy'] == strategy]
    avg_score = (strategy_data['p1_score'].mean() + strategy_data['p2_score'].mean()) / 2
    strategy_avg_scores.append(avg_score)
    strategy_names.append(strategy)

bars1 = ax1.bar(strategy_names, strategy_avg_scores, alpha=0.7)
ax1.set_title('Average Score by Strategy')
ax1.set_ylabel('Average Score')
ax1.set_xlabel('Strategy')

# Add value labels on bars
for bar, score in zip(bars1, strategy_avg_scores):
    ax1.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.1, 
             f'{score:.2f}', ha='center', va='bottom')

# 2. Score Distribution Box Plot
ax2 = axes[0, 1]
score_data = []
strategy_labels = []

for strategy in strategies:
    strategy_data = df_all[df_all['strategy'] == strategy]
    # Combine P1 and P2 scores for distribution
    scores = list(strategy_data['p1_score']) + list(strategy_data['p2_score'])
    score_data.extend(scores)
    strategy_labels.extend([strategy] * len(scores))

score_df = pd.DataFrame({'Strategy': strategy_labels, 'Score': score_data})
sns.boxplot(data=score_df, x='Strategy', y='Score', ax=ax2)
ax2.set_title('Score Distribution by Strategy')

# 3. Shut-the-Box Frequency
ax3 = axes[1, 0]
shut_box_freq = []

for strategy in strategies:
    strategy_data = df_all[df_all['strategy'] == strategy]
    freq = strategy_data['shut_box'].mean() * 100
    shut_box_freq.append(freq)

bars3 = ax3.bar(strategy_names, shut_box_freq, alpha=0.7, color='orange')
ax3.set_title('Shut-the-Box Frequency')
ax3.set_ylabel('Frequency (%)')
ax3.set_xlabel('Strategy')

# Add value labels
for bar, freq in zip(bars3, shut_box_freq):
    ax3.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.1, 
             f'{freq:.1f}%', ha='center', va='bottom')

# 4. Win Rate Balance (should be ~50/50 for same strategy vs same strategy)
ax4 = axes[1, 1]
p1_win_rates = []
p2_win_rates = []

for strategy in strategies:
    strategy_data = df_all[df_all['strategy'] == strategy]
    p1_wins = (strategy_data['winner'] == 'P1').sum()
    p2_wins = (strategy_data['winner'] == 'P2').sum()
    
    p1_win_rates.append((p1_wins / n_games) * 100)
    p2_win_rates.append((p2_wins / n_games) * 100)

x = range(len(strategies))
width = 0.35

bars_p1 = ax4.bar([i - width/2 for i in x], p1_win_rates, width, label='P1 Win Rate', alpha=0.7)
bars_p2 = ax4.bar([i + width/2 for i in x], p2_win_rates, width, label='P2 Win Rate', alpha=0.7)

ax4.set_title('Win Rate Balance (P1 vs P2)')
ax4.set_ylabel('Win Rate (%)')
ax4.set_xlabel('Strategy')
ax4.set_xticks(x)
ax4.set_xticklabels(strategy_names)
ax4.legend()

# Add value labels
for bars in [bars_p1, bars_p2]:
    for bar in bars:
        height = bar.get_height()
        ax4.text(bar.get_x() + bar.get_width()/2, height + 0.5, 
                 f'{height:.1f}%', ha='center', va='bottom', fontsize=9)

plt.tight_layout()
plt.show()
```

## Detailed Statistics

```{python}
display(Markdown("### Detailed Performance Metrics"))

for strategy in strategies:
    strategy_data = df_all[df_all['strategy'] == strategy]
    
    print(f"\n**{strategy.upper()} STRATEGY:**")
    print(f"- Total games: {len(strategy_data)}")
    print(f"- Average P1 score: {strategy_data['p1_score'].mean():.2f}")
    print(f"- Average P2 score: {strategy_data['p2_score'].mean():.2f}")
    print(f"- Score standard deviation: {score_df[score_df['Strategy']==strategy]['Score'].std():.2f}")
    print(f"- Minimum score achieved: {min(strategy_data['p1_score'].min(), strategy_data['p2_score'].min())}")
    print(f"- Maximum score achieved: {max(strategy_data['p1_score'].max(), strategy_data['p2_score'].max())}")
    print(f"- Shut-the-box rate: {strategy_data['shut_box'].mean()*100:.2f}%")
```

# Conclusion

```{python}
# Find best performing strategy by average score (lower is better)
best_strategy = strategy_names[strategy_avg_scores.index(min(strategy_avg_scores))]
best_score = min(strategy_avg_scores)

# Find strategy with highest shut-the-box rate
best_shutbox_strategy = strategy_names[shut_box_freq.index(max(shut_box_freq))]
best_shutbox_rate = max(shut_box_freq)

print(f"**Key Findings from {n_games} games per strategy:**")
print(f"")
print(f"- **Best Average Performance:** {best_strategy} (avg score: {best_score:.2f})")
print(f"- **Highest Shut-the-Box Rate:** {best_shutbox_strategy} ({best_shutbox_rate:.1f}%)")
print(f"- **Random Seed Used:** {random_seed} (for reproducibility)")
```

*Note: In "Shut the Box", lower scores are better. A score of 0 means the player successfully shut all tiles (shut the box).*

---

**Report generated using:** Quarto with Python  
**Simulation engine:** stbsim package  
**Data visualization:** matplotlib + seaborn